#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <stdio.h>
#include <conio.h>
#include <set>
#include <Windows.h>
using namespace std;
int* convertedList;                 int score = 0;
int list[16] = { 0 };               int matrix[4][4] = { 0 };
int direction = 0;                  bool movePossible = true;
int dirLine[] = { 1,0,-1,0 };       int dirColumn[] = { 0,1,0,-1 };
std::string line;                   std::string field[17][33];
bool game = true;                   int freeel = 0;
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
class fileWorking {
public:
    void toFile() {
        std::ofstream file("data.txt", std::ofstream::app);
        if (!file.is_open()) {
            std::cerr << "Unable to open file data.txt";
        }

        file << line;

        file.close();
    }

    int* converting(std::string line) {
        int x = 0;
        std::string block = "";
        for (int i = 0; i < line.length(); i++) {
            if (line[i] == ' ') {
                if (!block.empty()) {
                    std::istringstream iss(block);
                    iss >> list[x];
                    ++x;
                    block.clear();
                }
            }
            else {
                block += line[i];
            }
        }
        return list;
    }

    std::string fileReading() {
        std::ifstream file("data.txt", std::ifstream::app);
        if (!file.is_open()) {
            std::cerr << "Unable to open file data.txt";
        }

        std::string content;
        std::string line;
        while (std::getline(file, line)) {
            content += line;
        }
        file.close();

        return content;
    }

    void fileLoading() {
        // Создаём объект std::ofstream для работы с файлом
        std::ofstream file("data.txt");

        // Если файл был успешно открыт
        if (file.is_open()) {
            // Пишем число 1 в файл
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 4; j++) {
                    file << " " << matrix[i][j];
                }
            }

            // Закрываем поток и файл
            file.close();
        }
        else {
            // Если файл не был открыт, выводим сообщение об ошибке
            std::cout << "Ошибка при создании файла data.txt" << std::endl;
        }
    }
};

class Visual {
public:
    int** converting(int* convertedList) {
        int** matrix = new int* [4];
        for (int i = 0; i < 4; ++i) {
            matrix[i] = new int[4];
            for (int j = 0; j < 4; ++j) {
                matrix[i][j] = convertedList[4 * i + j];
            }
        }
        return matrix;
    }
    void output() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                std::cout << matrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
    void CreatingField() {
        for (int i = 0; i < 17; i++) {
            for (int j = 0; j < 33; j++) {
                field[i][j] = " ";
                if (j % 8 == 0) {
                    field[i][j] = "|";
                }
                if (i % 4 == 0) {
                    field[i][j] = "-";
                }
            }
        }
    }
    void MatrixToField() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                field[i * 4 + 2][j * 8 + 4] = std::to_string(matrix[i][j]);
            }
        }
    }
    void sorting() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (matrix[i][j] >= 10) {
                    field[i * 4 + 2][j * 8 + 5] = "";
                    if (matrix[i][j] >= 100) {
                        field[i * 4 + 2][j * 8 + 3] = "";
                        if (matrix[i][j] >= 1000) {
                            field[i * 4 + 2][j * 8 + 6] = "";
                            if (matrix[i][j] >= 10000) {
                                field[i * 4 + 2][j * 8 + 2] = "";
                                if (matrix[i][j] >= 100000) {
                                    field[i * 4 + 2][j * 8 + 1] = "";
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};

class Gameplay {
public:
    int dir = 1;
    int direction;
    char key = 'w';
    bool canDoMove(int line, int column, int nextLine, int nextColumn) {
        if (nextLine < 0 || nextColumn < 0 || nextLine >= 4 || nextColumn >= 4
            || (matrix[line][column] != matrix[nextLine][nextColumn] && matrix[nextLine][nextColumn] != 0))
            return false;
        return true;
    }
    bool MoveAbility(int matrix[4][4]) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (matrix[i][j] == 0) {
                    return true;
                    break;
                }
                if (matrix[i + 1][j] == matrix[i][j] || matrix[i - 1][j] == matrix[i][j] || matrix[i][j + 1] == matrix[i][j] || matrix[i][j - 1] == matrix[i][j]) {
                    return true;
                    break;
                }
            }
        }
        return false;
    }

    void movement(int matrix[4][4]) {
        key = _getch();
        switch (key) {          //input
        case's':
            direction = 0;
            break;
        case 'd':
            direction = 1;
            break;
        case 'w':
            direction = 2;
            break;
        case'a':
            direction = 3;
            break;
        }


        int StartLine = 0, StartColumn = 0, lineStep = 1, columnStep = 1;


        if (direction == 0) {
            StartLine = 3;
            lineStep = -1;
        }
        else if (direction == 1) {
            StartColumn = 3;
            columnStep = -1;
        }

        int movePossible = 0, canAddPiece = 0;
        char key = 0;
        do {
            movePossible = 0;
            for (int i = StartLine; i >= 0 && i < 4; i += lineStep)
                for (int j = StartColumn; j >= 0 && j < 4; j += columnStep) {
                    int nextI = i + dirLine[direction], nextJ = j + dirColumn[direction];
                    if (matrix[i][j] && canDoMove(i, j, nextI, nextJ)) {
                        matrix[nextI][nextJ] += matrix[i][j];
                        matrix[i][j] = 0;
                        movePossible = canAddPiece = 1;
                    }
                }
        } while (movePossible);
    }
    int countingScore(int matrix[4][4]) {
        score = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (matrix[i][j] != 0 && matrix[i][j] != 2) {
                    score += matrix[i][j]*2;
                }
            }
        }
        return score;
    }
    int findingMax(int matrix[4][4]) {
        int maximum = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (matrix[i][j] > maximum) {
                    maximum = matrix[i][j];
                }
            }
        }
        return maximum;
    }
    void output() {
        for (int x = 0; x < 10; x++) {
            std::cout << std::endl;
        }
        std::cout << "       ___ \\    _ \\  |  |     _ )" << std::endl;
        std::cout << "         ) |  |   |  |  |     _ \\" << std::endl;
        std::cout << "        __/   |   | ___ __|  (   |" << std::endl;
        std::cout << "      _____| \\___/     _|   \\___/" << std::endl;
        for (int i = 0; i < 5;i++) { 
            std::cout << "" << std::endl;
        }

        for (int i = 0; i < 17; i++) {
            std::cout << "    ";
            for (int j = 0; j < 33; j++) {
                if (field[i][j] == "0") {
                    field[i][j] = " ";
                }
                std::cout << field[i][j];
            }
            if (i == 12) {
                std::cout << "           score:" << countingScore(matrix);
            }
            if (i == 10) {
                std::cout << "           maximum:" << findingMax(matrix);
            }
            std::cout << std::endl;
        }
    }
    void randomNumber(){
        set<pair<int, int>> selected;
        srand(time(nullptr));
        bool free = true;
        int theNum = 2;
        int newnum = rand() % 10;
        if (newnum ==9) {
            theNum = 4;
            int newnum = rand() % 100;
            if (newnum == 999) {
                theNum = 8;
            }
        }
        int i; int j;
        while (true) {
            int i = rand() % 4;
            int j = rand() % 4;
            // проверка, не были ли выбраны эти координаты ранее
            if (selected.find(make_pair(i, j)) != selected.end()) {
                continue; // если да, пропускаем итерацию и выбираем другие координаты
            }
            if (matrix[i][j] == 0) {
                matrix[i][j] = 2;
                selected.insert(make_pair(i, j)); // добавляем координаты в множество
                break; // завершаем цикл, если нашли свободную клетку
            }
        }
    }
    void newGame() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = 0;
            }
        }
        randomNumber(); randomNumber();
    }
    void GameWorking() {
        while (MoveAbility(matrix)) {
            movement(matrix);
            system("cls");
            randomNumber();
            Visual visual;
            visual.CreatingField();
            visual.MatrixToField();
            visual.sorting();
            if (key == 'q') {
                newGame();
            }

            //all should be before output
            output();
            fileWorking file;
            file.fileLoading();
        }
        if (!MoveAbility(matrix)) {
            newGame();
        }
    }
};

int main() {
    fileWorking file;
    file.toFile();
    std::string line = file.fileReading();
    int* convertedList = file.converting(line);
    Visual visual;
    int** convertedMatrix = visual.converting(convertedList);
    visual.CreatingField();
    for (int x = 0; x < 40; x++) {
        std::cout << std::endl;
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            matrix[i][j] = convertedMatrix[i][j];
        }
    }
    visual.MatrixToField();
    //for (int i = 0; i < 17; i++) {
    //    for (int j = 0; j < 33; j++) {
    //        std::cout<<field[i][j];
    //    }
    //    std::cout << std::endl;
    //}
    std::cout << std::endl;
    Gameplay gameplay;
    gameplay.output();
    gameplay.GameWorking();
    return 0;
}
